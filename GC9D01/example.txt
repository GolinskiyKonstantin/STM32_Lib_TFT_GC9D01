/*	сохраняем данный файл в кодировке UTF-8		*/


 author: Golinskiy Konstantin	e-mail: golinskiy.konstantin@gmail.com
 
 
//===================================================

//----- SPI2 parameter configuration ----------------------------------------

// SPI включаем только передача ( MOSI SCK )
// настройка SPI, скорость максимальная, 1 Line (TX only), Polarity High, Phase 2Edge:
// частота SPI должна быть меньше 50 МГц

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
  
//-----------------------------------------------------------------------------



в файле fonts.h нужно выбрать шрифты:

//---- для экономии памяти шрифты которые не используються закоментировать -------------------------------------
			// Шрифт имеет кирилицу и латиницу
			#define FONT_6x8		//  6 x 8 pixels font size structure 
			#define FONT_7x9		//  7 x 9 pixels font size structure 
			#define FONT_11x18		//  11 x 18 pixels font size structure 
			#define FONT_16x26		//  16 x 26 pixels font size structure 
			// Только цифры -- only numbers
			#define FONT_16x28		//  16 x 28 pixels font size structure only numbers	
//--------------------------------------------------------------------------------------------------------------

в файле GC9D01.h указываем настройки:

//#######  SETUP  ##############################################################################################
		
		// данная библиотека работает только с буфером кадра ( нужно много оперативки )
		
		//==== выбераем через что будем отправлять через HAL или CMSIS(быстрее) ==================
		//-- нужное оставляем другое коментируем ( важно должно быть только один выбран )---------
		
			// указываем порт SPI для CMSIS ( быстро )-------
			// так как у разных МК разные регистры то в функциях корректируем под свой МК
			// на данный момент есть реализация на серию F1 F4 H7 для выбора серии в функциях
			//	void GC9D01_SendCmd(uint8_t Cmd);
			//	void GC9D01_SendData(uint8_t Data );
			//	void GC9D01_SendDataMASS(uint8_t* buff, size_t buff_size);	
			// комментируем и раскомментируем то что нам нужно, также там же редактируем под свой МК если не работает
			//#define 	GC9D01_SPI_CMSIS 	SPI2
			//-----------------------------------------------
			
			// указываем порт SPI для HAL ( медлено )--------
			#define 	GC9D01_SPI_HAL 		hspi1
			//-----------------------------------------------
			
		//============================================================================
					
		//=== указываем порты ( если в кубе назвали их DC RES CS то тогда нечего указывать не нужно )
		#if defined (DC_GPIO_Port)
		#else
			#define DC_GPIO_Port	GPIOC
			#define DC_Pin			GPIO_PIN_5
		#endif
		
		#if defined (RST_GPIO_Port)
		#else
			#define RST_GPIO_Port   GPIOB
			#define RST_Pin			GPIO_PIN_14
		#endif
		
		//--  Cесли используем порт CS для выбора устройства тогда раскомментировать ------------
		// если у нас одно устройство лучше пин CS притянуть к земле( или на порту подать GND )
		
		#define CS_PORT
		
		//----------------------------------------------------------------------------------------
		#ifdef CS_PORT
			#if defined (CS_GPIO_Port)
			#else
				#define CS_GPIO_Port    GPIOB
				#define CS_Pin			GPIO_PIN_12
			#endif
		#endif
		
		//=============================================================================
		
		//==  выбираем дисплей: =======================================================
		//-- нужное оставляем другое коментируем ( важно должно быть только один выбран )---------
		
		#define	GC9D01_IS_40X160		// 0.99" 40 x 160 GC9D01 		
		
		//=============================================================================
		
		
//##############################################################################################################





//=========================================================


#include <GC9D01.h>

#include "bitmap.h"
#include "fonts.h"


#include "stdio.h"
	.........
	.........

main()=============================================================================================================================
	
////////////////////////////////////////////////////////////////////////////////////////////////////

		// Процедура инициализации дисплея GC9D01
		GC9D01_Init();
	
		// установка ротации дисплея не обязательно так как по умолчанию стоит режим 1 ( всего 4 режима 1,2,3,4 )
		GC9D01_rotation( 1 );
	
		// закрашиваем весь экран указаным цветом 
		GC9D01_FillScreen( RGB565(255, 0, 0) );
		GC9D01_Update();
		HAL_Delay (500);
		
		// закрашиваем весь экран указаным цветом 
		GC9D01_FillScreen( RGB565(0, 255, 0) );
		GC9D01_Update();
		HAL_Delay (500);
	
		// закрашиваем весь экран указаным цветом 
		GC9D01_FillScreen( RGB565(0, 0, 255) );
		GC9D01_Update();
		HAL_Delay (500);
	
		GC9D01_DrawPixel( 10, 10, RGB565( 255, 255, 255 ));
//	GC9D01_DrawPixel( 5, 2, RGB565( 255, 255, 255 ));
//	GC9D01_DrawPixel( 10, 2, RGB565( 255, 255, 255 ));
		GC9D01_Update();
	
//	// печатаем символ ( один ) параметры: х,  у, ( начиная с 0 ),  цвет символа, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), сам символ ( поддерживает кириллицу )
//	GC9D01_DrawChar( 2, 2, RGB565( 255, 255, 255 ) , RGB565( 0, 10, 10 ) , 0, &Font_16x26, 1, 'F' );
//	GC9D01_Update();

		// печатаем строку параметры: х,  у, ( начиная с 0 ), цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), сама строка ( поддерживает кириллицу )
		GC9D01_print( 2, 22, RGB565(255, 255, 255) , RGB565(0, 10, 100) , 1, &Font_6x8, 1, "STM32 TFT" );
		GC9D01_Update();
	
//	// рисуем цветную иконку. параметры координаты х и у ( начиная с 0 ), размер иконки шир и выс, имя иконки ( массив )
//	GC9D01_DrawImage( 0, 0, 40, 40, cupcake	);
//	GC9D01_Update();
	
//	// рисуем монохромную иконку. параметры координаты х и у ( начиная с 0 ), имя иконки ( массив ), размер иконки шир и выс, цвет отображения
//	GC9D01_DrawBitmap( 10, 7, logo, 128, 27, RGB565(255, 0, 0) );
//	GC9D01_Update();
	
//	// рисуем монохромную иконку с указаным углом поворота, параметры координаты х и у ( начиная с 0 ), имя иконки ( массив ), размер иконки шир и выс, цвет отображения, угол поворота (0-360)
//	GC9D01_DrawBitmapWithAngle( 10, 17, logo, 128, 27, RGB565(255, 0, 0), 10.0 );
//	GC9D01_Update();
		
//	HAL_Delay (1000);
//	// переход в спящий режим
//	GC9D01_SleepModeEnter();
//	
//	HAL_Delay (1000);
//	// выход их спящего режима
//	GC9D01_SleepModeExit();
//	HAL_Delay (1000);
	
//	// круг пустотелый
//	GC9D01_DrawCircle(100, 20, 16, RGB565(255, 0, 255));
//	GC9D01_Update();
	
//	// инверсия цветов 0-выкл  1-вкл
//	GC9D01_InversionMode(0);

	// очищаем только буфер кадра 
	GC9D01_ClearFrameBuffer();
	// очищаем дисплей
	GC9D01_Clear();
	
		// вкл/выкл дисплея 0-выкл 1- вкл
//	GC9D01_DisplayPower( 1 );

//	// прямоугольник пустотелый ( координата X и Y ( начиная с 0 ) ширина и высота в пикселях )
//	GC9D01_DrawRectangle(0, 10, 10, 20, RGB565(255, 0, 0)) ;
//	GC9D01_Update();

//	// печатаем символ с указаным углом, параметры: х,  у, ( начиная с 0 ), цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), угол поворота (0.0 - 360.0), самсимвол ( поддерживает кириллицу )
//	GC9D01_DrawCharWithAngle( 20, 20, RGB565(255, 255, 255) , RGB565(0, 10, 100) , 1, &Font_11x18, 1, 45.0, 'R' );
//	GC9D01_Update();
	
//	// печатаем строку с указаным углом, параметры: х,  у, ( начиная с 0 ), цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), угол поворота (0.0 - 360.0), сама строка ( поддерживает кириллицу )
//	GC9D01_printWithAngle( 40, 20, RGB565(255, 255, 255) , RGB565(0, 10, 100) , 1, &Font_11x18, 1, 20, "ANGLE" );
//	GC9D01_Update();
	
	
//	// линия
//	GC9D01_DrawLine(1, 20, 15, 40, RGB565(255, 255, 0));
//	GC9D01_Update();
	
//	// круг закрашеный
//	GC9D01_DrawCircleFilled(50, 290, 20, RGB565(255, 40, 255)) ;
//	GC9D01_Update();

//	// рисуем элипс ( координаты центра, радиус по Х радиус по У, цвет )
//	GC9D01_DrawEllipse( 150, 150, 20, 80, RGB565(0, 0, 255) );
//	GC9D01_Update();

//	// рисуем элипс закрашенный ( координаты центра, радиус по Х радиус по У, цвет )
//	GC9D01_DrawEllipseFilled( 150, 150, 80, 20, RGB565(0, 0, 255) );
//	GC9D01_Update();
	
//	// рисуем элипс под указаным углом наклона ( координаты центра, радиус по Х радиус по У, угол поворота (0-360), цвет )
//	GC9D01_DrawEllipseWithAngle( 150, 150, 80, 20, 45.0, RGB565(0, 0, 255) );
//	GC9D01_Update();

//	// рисуем элипс закрашенный под указаным углом наклона ( координаты центра, радиус по Х радиус по У, угол поворота (0-360), цвет )
//	GC9D01_DrawEllipseFilledWithAngle( 150, 150, 80, 20, 200.0, RGB565(0, 255, 0) );
//	GC9D01_Update();

//	// рисуем линию с указаным углом и длиной ( начальные координаты, длина линии, угол поворота (0-360), и цвет линии )
//	GC9D01_DrawLineWithAngle(100, 100, 50, 45.0, RGB565(255, 255, 255));
//	GC9D01_Update();

//	// прямоугольник закрашеный
//	GC9D01_DrawRectangleFilled(90, 265, 140, 310, RGB565(0, 255, 0)) ;
//	GC9D01_Update();

//	// прямоугольник пустотелый
//	GC9D01_DrawRectangle(160, 265, 220, 309, RGB565(255, 255, 255)) ;	
//	GC9D01_Update();

//	// рисуем треугольник пустотелый
//	GC9D01_DrawTriangle(60, 40, 150, 100, 200, 200, RGB565(100, 255, 150) );
//	GC9D01_Update();

//	// рисуем треугольник закрашеный
//	GC9D01_DrawFilledTriangle(20, 40, 150, 100, 200, 200, RGB565(100, 255, 150) );
//	GC9D01_Update();

//	// рисуем прямоугольник с закругленными краями ( закрашенный )
//	GC9D01_DrawFillRoundRect(10, 10, 50, 50, 10, RGB565(100, 255, 150));
//	GC9D01_Update();

//	// рисуем прямоугольник с закругленными краями ( пустотелый )
//	GC9D01_DrawRoundRect(10, 10, 50, 50, 10, RGB565(100, 255, 150));
//	GC9D01_Update();

//	// рисуем полукруг ( правое или левое полушарие (параметр 1 или 2) ) закрашенный
//	GC9D01_DrawFillCircleHelper(30, 30, 20 , 1, 0, RGB565(100, 255, 150));
//	GC9D01_Update();

//	// рисуем дугу ( четверть круга (параметр 1, 2, 4, 8) ) шириной 1 пиксель
//	GC9D01_DrawCircleHelper(30, 30, 20 , 1, RGB565(100, 255, 150));
//	GC9D01_Update();
		
//	// рисованиe дуга толстая ( часть круга ) ( координаты центра, радиус, начальный и конечный угол (0-360), цвет линии, толщина линии)
//	// если нужно нарисовать наоборот другую часть то меняем начальный угол и конечный местами
//	GC9D01_DrawArc(100, 100, 50, 320, 220, RGB565(255, 255, 0), 5);
//	GC9D01_DrawArc(100, 100, 50, 220, 320, RGB565(255, 0, 255), 5);
//	GC9D01_Update();

//	
//	// линия толстая ( последний параметр толшина )
//	GC9D01_DrawLineThick(10, 120, 200, 140, RGB565(255, 255, 0), 5);
//	GC9D01_Update();

//	
//	// линия толстая нужной длины и указаным углом поворота (0-360) ( последний параметр толшина )
//	GC9D01_DrawLineThickWithAngle( 100, 100, 80, 90.0, RGB565(255, 255, 0), 10 );
//	GC9D01_Update();

////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	.........
	.........
	.........

while(1)===========================================================================================================================

	.........
	.........
	.........
	.........

=== end while(1) ==================================================================================================================
=== end main() ====================================================================================================================
